{"version":3,"sources":["prettyFormError.min.js"],"names":["$","window","document","undefined","createErrorsForInvalid","invalid","options","each","index","value","errors","elementError","addClass","classError","text","validationMessage","positionMethod","pluginName","dataKey","Plugin","element","this","multiCheckbox","enabled","selector","callToAction","focusErrorOnClick","fadeOutError","fadeOut","fadeOutOpts","init","prototype","console","warn","extend","multiCheckboxConfig","handleClickCallToAction","allCheckboxes","change","is","removeAttr","attr","btn","find","on","event","preventDefault","remove","not","length","focus","fn","data","jQuery"],"mappings":"CAIG,SAAUA,EAAGC,EAAQC,EAAUC,GAKhC,QAASC,GAAwBC,EAASC,GACxC,MAAON,GAAEO,KAAMF,EAAS,SAAUG,EAAOC,GACvC,GAAIC,GAASV,EAAG,IAAMM,EAAQK,aAAe,KAC1CC,SAAUN,EAAQO,YAClBC,KAAML,EAAMM,kBAEff,GAAGS,GAASH,EAAQU,gBAAkBN,KAV1C,GAAIO,GAAa,kBACbC,EAAU,UAAYD,EActBE,EAAS,SAAUC,EAASd,GAC9Be,KAAKD,QAAUpB,EAAGoB,GAClBC,KAAKf,SACHgB,eACEC,SAAS,EACTC,SAAU,kBAEZX,WAAY,kBACZG,eAAgB,QAChBL,aAAc,MACdc,aAAc,SACdC,mBAAmB,EACnBC,cAAeC,SAAS,EAAOC,YAAa,KAG9CR,KAAKS,KAAMxB,GAGba,GAAOY,WACLD,KAAM,SAAUxB,GAGTA,IAAYH,GACbG,EAAQU,iBAAmBb,GACA,UAA3BG,EAAQU,gBACmB,WAA3BV,EAAQU,iBAEVgB,QAAQC,KACN,uGAEF3B,EAAQU,eAAiB,SAG3BhB,EAAEkC,OAAQb,KAAKf,QAASA,GAGnBe,KAAKf,QAAQgB,cAAcC,SAC9BF,KAAKc,oBAAqBd,KAAKf,SAGjCe,KAAKe,wBAAyBf,KAAKD,QAASC,KAAKf,UAKnD6B,oBAAqB,SAAU7B,GAC7B,GAAI+B,GAAgBrC,EAAGM,EAAQgB,cAAcE,SAC7Ca,GACGC,OAAQ,WACFD,EAAcE,GAAI,YACrBF,EAAcG,WAAY,YAE1BH,EAAcI,KAAM,WAAY,eAMxCL,wBAAyB,SAAUhB,EAASd,GAC1C,GAAIoC,GAAMtB,EAAQuB,KAAMrC,EAAQmB,aAEhCiB,GAAIE,GAAI,QAAS,SAAUC,GACzBA,EAAMC,iBAEN9C,EAAG,IAAMM,EAAQO,YAAakC,QAG9B,IAAI1C,GAAUe,EAAQuB,KAAM,YAAaK,IAAK,WAG9C5C,GAAwBC,EAASC,GAG5BA,EAAQoB,mBAAqBrB,EAAQ4C,OAAS,GACjD5C,EAAS,GAAI6C,QAIV5C,EAAQqB,aAAaC,SACxB5B,EAAG,IAAMM,EAAQO,YACde,QAAStB,EAAQqB,aAAaE,iBAMzC7B,EAAEmD,GAAIlC,GAAe,SAAUX,GAC7B,MAAOe,MAAKd,KAAM,WACVP,EAAEoD,KAAM/B,KAAMH,IAClBlB,EAAEoD,KAAM/B,KAAMH,EAAS,GAAIC,GAAQE,KAAMf,QAI9C+C,OAAQpD,OAAQC","file":"prettyFormError.min.js","sourcesContent":["/* global PrettyFormError */\n/*       */\n// prettyError jQuery plugin\n\n;( function( $, window, document, undefined ) { // eslint-disable-line\n  var pluginName = 'prettyFormError';\n  var dataKey = 'plugin_' + pluginName;\n\n  // utils\n  function createErrorsForInvalid( invalid, options                  ) {\n    return $.each( invalid, function( index, value ) {\n      var errors = $( '<' + options.elementError + '>' )\n        .addClass( options.classError )\n        .text( value.validationMessage );\n      // position for error message -> before or after\n      $( value )[ options.positionMethod ]( errors );\n    });\n  }\n\n  // Plugin constructor\n  var Plugin = function( element, options                  ) {\n    this.element = $( element );\n    this.options = {\n      multiCheckbox: {\n        enabled: false,\n        selector: '.multiCheckbox'\n      },\n      classError: 'prettyFormError',\n      positionMethod: 'after',\n      elementError: 'div',\n      callToAction: 'button',\n      focusErrorOnClick: true,\n      fadeOutError: {fadeOut: false, fadeOutOpts: ''}\n    };\n\n    this.init( options );\n  };\n\n  Plugin.prototype = {\n    init: function( options                  ) {\n      // user options checker for positionMethod\n      // to avoid breaking the plugin initialization\n      if ( options !== undefined &&\n          options.positionMethod !== undefined &&\n          options.positionMethod !== 'after' &&\n          options.positionMethod !== 'before'\n        ) {\n        console.warn(\n          'positionMethod prop values should be \"after\" or \"before\", a default \"after\" value has been assigned'\n        );\n        options.positionMethod = 'after';\n      }\n\n      $.extend( this.options, options );\n\n      // multiCheckbox configuration\n      if ( this.options.multiCheckbox.enabled ) {\n        this.multiCheckboxConfig( this.options );\n      }\n\n      this.handleClickCallToAction( this.element, this.options );\n    },\n\n    // workaround to validate the multiple\n    // checkboxes that at least one value is required\n    multiCheckboxConfig: function( options                  ) {\n      var allCheckboxes = $( options.multiCheckbox.selector );\n      allCheckboxes\n        .change( function() {\n          if ( allCheckboxes.is( ':checked' )) {\n            allCheckboxes.removeAttr( 'required' );\n          } else {\n            allCheckboxes.attr( 'required', 'required' );\n          }\n        });\n    },\n\n    // button click handler\n    handleClickCallToAction: function( element, options                  ) {\n      var btn = element.find( options.callToAction );\n\n      btn.on( 'click', function( event ) {\n        event.preventDefault();\n        // removing the old errors\n        $( '.' + options.classError ).remove();\n        // targeting all invalid errors,\n        // fieldset elements also receive the validity pseudo-selector\n        var invalid = element.find( ':invalid' ).not( 'fieldset' );\n\n        // Adding errors to :invalid elements\n        createErrorsForInvalid( invalid, options );\n\n        // focus the first element with error\n        if ( options.focusErrorOnClick && invalid.length > 1 ) {\n          invalid[ 0 ].focus();\n        }\n\n        // fadeOut de errors\n        if ( options.fadeOutError.fadeOut ) {\n          $( '.' + options.classError )\n            .fadeOut( options.fadeOutError.fadeOutOpts );\n        }\n      });\n    }\n  };\n\n  $.fn[ pluginName ] = function( options ) {\n    return this.each( function() {\n      if ( !$.data( this, dataKey )) {\n        $.data( this, dataKey, new Plugin( this, options ));\n      }\n    });\n  };\n}( jQuery, window, document ));\n"]}