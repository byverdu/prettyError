{"version":3,"sources":["prettyFormError.min.js"],"names":["$","window","document","undefined","createErrorsForInvalid","invalid","options","each","index","value","errors","elementError","addClass","classError","text","validationMessage","positionMethod","pluginName","dataKey","Plugin","element","this","multiCheckbox","enabled","selector","callToAction","focusErrorOnClick","fadeOutError","fadeOut","fadeOutOpts","init","prototype","console","warn","extend","multiCheckboxConfig","handleClickCallToAction","allCheckboxes","change","is","removeAttr","attr","btn","find","on","event","preventDefault","remove","not","length","focus","fn","data","jQuery"],"mappings":"AAAA,cAMC,SAAWA,EAAGC,EAAQC,EAAUC,GAM/B,QAASC,GAAuBC,EAASC,GACvC,MAAON,GAAEO,KAAKF,EAAS,SAAUG,EAAOC,GACtC,GAAIC,GAASV,EAAE,IAAMM,EAAQK,aAAe,KAAKC,SAASN,EAAQO,YAAYC,KAAKL,EAAMM,kBAEzFf,GAAES,GAAOH,EAAQU,gBAAgBN,KARrC,GAAIO,GAAa,kBACbC,EAAU,UAAYD,EAYtBE,EAAS,SAAgBC,EAASd,GACpCe,KAAKD,QAAUpB,EAAEoB,GACjBC,KAAKf,SACHgB,eACEC,SAAS,EACTC,SAAU,kBAEZX,WAAY,kBACZG,eAAgB,QAChBL,aAAc,MACdc,aAAc,SACdC,mBAAmB,EACnBC,cAAgBC,SAAS,EAAOC,YAAa,KAG/CR,KAAKS,KAAKxB,GAGZa,GAAOY,WACLD,KAAM,SAAcxB,GAGdA,IAAYH,GAAaG,EAAQU,iBAAmBb,GAAwC,UAA3BG,EAAQU,gBAAyD,WAA3BV,EAAQU,iBACjHgB,QAAQC,KAAK,uGACb3B,EAAQU,eAAiB,SAG3BhB,EAAEkC,OAAOb,KAAKf,QAASA,GAGnBe,KAAKf,QAAQgB,cAAcC,SAC7BF,KAAKc,oBAAoBd,KAAKf,SAGhCe,KAAKe,wBAAwBf,KAAKD,QAASC,KAAKf,UAKlD6B,oBAAqB,SAA6B7B,GAChD,GAAI+B,GAAgBrC,EAAEM,EAAQgB,cAAcE,SAC5Ca,GAAcC,OAAO,WACfD,EAAcE,GAAG,YACnBF,EAAcG,WAAW,YAEzBH,EAAcI,KAAK,WAAY,eAMrCL,wBAAyB,SAAiChB,EAASd,GACjE,GAAIoC,GAAMtB,EAAQuB,KAAKrC,EAAQmB,aAE/BiB,GAAIE,GAAG,QAAS,SAAUC,GACxBA,EAAMC,iBAEN9C,EAAE,SAASY,SAAS,IACpBZ,EAAE,IAAMM,EAAQO,YAAYkC,QAI5B,IAAI1C,GAAUe,EAAQuB,KAAK,YAAYK,IAAI,WAG3C5C,GAAuBC,EAASC,GAG5BA,EAAQoB,mBAAqBrB,EAAQ4C,OAAS,GAChD5C,EAAQ,GAAG6C,QAIT5C,EAAQqB,aAAaC,SACvB5B,EAAE,IAAMM,EAAQO,YAAYe,QAAQtB,EAAQqB,aAAaE,iBAMjE7B,EAAEmD,GAAGlC,GAAc,SAAUX,GAC3B,MAAOe,MAAKd,KAAK,WACVP,EAAEoD,KAAK/B,KAAMH,IAChBlB,EAAEoD,KAAK/B,KAAMH,EAAS,GAAIC,GAAOE,KAAMf,QAI5C+C,OAAQpD,OAAQC","file":"prettyFormError.min.js","sourcesContent":["'use strict';\n\n// prettyError jQuery plugin\n\n// var xoxo: number = 0 + '4';\n\n;(function ($, window, document, undefined) {\n  // eslint-disable-line\n  var pluginName = 'prettyFormError';\n  var dataKey = 'plugin_' + pluginName;\n\n  // utils\n  function createErrorsForInvalid(invalid, options) {\n    return $.each(invalid, function (index, value) {\n      var errors = $('<' + options.elementError + '>').addClass(options.classError).text(value.validationMessage);\n      // position for error message -> before or after\n      $(value)[options.positionMethod](errors);\n    });\n  }\n\n  // Plugin constructor\n  var Plugin = function Plugin(element, options) {\n    this.element = $(element);\n    this.options = {\n      multiCheckbox: {\n        enabled: false,\n        selector: '.multiCheckbox'\n      },\n      classError: 'prettyFormError',\n      positionMethod: 'after',\n      elementError: 'div',\n      callToAction: 'button',\n      focusErrorOnClick: true,\n      fadeOutError: { fadeOut: false, fadeOutOpts: '' }\n    };\n\n    this.init(options);\n  };\n\n  Plugin.prototype = {\n    init: function init(options) {\n      // user options checker for positionMethod\n      // to avoid breaking the plugin initialization\n      if (options !== undefined && options.positionMethod !== undefined && options.positionMethod !== 'after' && options.positionMethod !== 'before') {\n        console.warn('positionMethod prop values should be \"after\" or \"before\", a default \"after\" value has been assigned');\n        options.positionMethod = 'after';\n      }\n\n      $.extend(this.options, options);\n\n      // multiCheckbox configuration\n      if (this.options.multiCheckbox.enabled) {\n        this.multiCheckboxConfig(this.options);\n      }\n\n      this.handleClickCallToAction(this.element, this.options);\n    },\n\n    // workaround to validate the multiple\n    // checkboxes that at least one value is required\n    multiCheckboxConfig: function multiCheckboxConfig(options) {\n      var allCheckboxes = $(options.multiCheckbox.selector);\n      allCheckboxes.change(function () {\n        if (allCheckboxes.is(':checked')) {\n          allCheckboxes.removeAttr('required');\n        } else {\n          allCheckboxes.attr('required', 'required');\n        }\n      });\n    },\n\n    // button click handler\n    handleClickCallToAction: function handleClickCallToAction(element, options) {\n      var btn = element.find(options.callToAction);\n\n      btn.on('click', function (event) {\n        event.preventDefault();\n        // removing the old errors\n        $('.xoxo').addClass('');\n        $('.' + options.classError).remove();\n\n        // targeting all invalid errors,\n        // fieldset elements also receive the validity pseudo-selector\n        var invalid = element.find(':invalid').not('fieldset');\n\n        // Adding errors to :invalid elements\n        createErrorsForInvalid(invalid, options);\n\n        // focus the first element with error\n        if (options.focusErrorOnClick && invalid.length > 1) {\n          invalid[0].focus();\n        }\n\n        // fadeOut de errors\n        if (options.fadeOutError.fadeOut) {\n          $('.' + options.classError).fadeOut(options.fadeOutError.fadeOutOpts);\n        }\n      });\n    }\n  };\n\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, dataKey)) {\n        $.data(this, dataKey, new Plugin(this, options));\n      }\n    });\n  };\n})(jQuery, window, document);"]}