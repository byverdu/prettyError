{"version":3,"names":[],"mappings":"","sources":["prettyFormError.js"],"sourcesContent":["// // \n// /* global IprettyError */\n\n// import { utils } from './utils';\n\n// /** Global factory for PrettyFormError\n//  *  using vanilla JS\n//  * @returns {Function} init(element, options)\n//  */\n\n// function PrettyFormError() {\n//     /**\n//    * Applies click handler for collection\n//    * @param {*} elements Array of HTMLElements\n//    * @param {*} options User options or defaults\n//    * @return {void}\n//    */\n//   function _clickHandlerNodeList( elements: any, options: any ): void {\n//     for ( let i = 0; i < elements.length; i++ ) {\n//       _onClickHandler( elements[ i ], options );\n//     }\n//   }\n\n//   /**\n//    * Append click event for element within the form\n//    * @param {HTMLElement} element form element to apply\n//    * @param {*} options User options or defaults\n//    * @return {void}\n//    */\n//   function _onClickHandler( element: HTMLElement, options: any ): void {\n//     const button: ?HTMLElement = element.querySelector( `${options.callToAction}` );\n\n//     if ( button ) {\n//       button.addEventListener( 'click', ( event: MouseEvent ) => {\n//         event.preventDefault();\n//         const invalids = element.querySelectorAll( ':invalid' );\n//         const valids = element.querySelectorAll( ':valid' );\n\n//         // removing old errors\n//         if ( !options.fadeOutError.fadeOut && document.querySelector( `.${options.classError}` )) {\n//           utils._removeOldErrors( element,  options.classError );\n//         }\n//         // fading old errors\n//         if ( options.fadeOutError.fadeOut ) {\n//           let observer = utils._fadeOutErrorConfig();\n//           const config = { attributes: true, childList: true, characterData: true };\n//           observer.observe( element, config );\n\n//           setTimeout(() => {\n//             utils._removeOldErrors( element,  options.classError );\n//           }, 6200 );\n\n//           // clearing observer\n//           if ( invalids.length === 0 && valids.length > 0 ) {\n//             observer.disconnect();\n//             observer = null;\n//           }\n//         }\n\n//         // adding new errors\n//         if ( invalids.length > 0 ) {\n//           utils._createErrorElement(\n//             invalids,\n//             options.elementError,\n//             options.classError,\n//             options.positionMethod\n//           );\n//         }\n\n//         // clearing valid inputs\n//         if ( invalids.length === 0 && valids.length > 0 ) {\n//           utils._clearValidInputs( valids );\n//         }\n\n//         // focusing on first errrored input\n//         if ( invalids.length > 0 && options.focusErrorOnClick ) {\n//           invalids[ 0 ].focus();\n//         }\n\n//         // multiCheckbox configuration\n//         if ( options.multiCheckbox.enabled ) {\n//           const selector = options.multiCheckbox.selector;\n//           const checkboxes: NodeList<any> = document.querySelectorAll( selector );\n\n//           [].forEach.call( checkboxes, input => {\n//             input.addEventListener( 'change', () => {\n//               utils._changeHandler( checkboxes, selector );\n//             });\n//           });\n//         }\n//       });\n//     }\n//   }\n\n//   function  init \n//    (   element: any,\n//       options: IprettyError\n//  ) {\n//       const isHTMLElement = element instanceof Element ||\n//         element instanceof NodeList ||\n//         element instanceof HTMLCollection;\n//       let tempElem;\n\n//       // seting default element for empty case\n//       isHTMLElement ?\n//         tempElem = utils._convertToArray( element ) :\n//         tempElem = document.querySelectorAll( 'form' );\n\n//       // seting user props or default\n//       // and adding click handler\n//       _clickHandlerNodeList( tempElem, utils._setOpts( options ));\n//     }\n// }\n\n// $.fn.prettyFormError = function( options ) {\n//   return this.each( function() {\n//     if ( !$.data( this, 'prettyFormError' )) {\n//       var x = new PrettyFormError();\n//       x.init(this, options )\n//       console.log(x);\n//       $.data( this, 'prettyFormError', x); \n//     }\n//   });\n// };\n\n// module.exports = PrettyFormError;\n\nfunction _optionsConfig(opts) {\n  var innerOpts = opts || {};\n  var positionMethod = innerOpts.positionMethod  ? \n    (innerOpts.positionMethod  === 'after' ? 'afterend' : 'beforebegin') : innerOpts.positionMethod  = 'afterend';\n  var classError = innerOpts.classError || 'prettyFormError'\n\n  return {\n    positionMethod: positionMethod,\n    classError: classError      \n  }\n}\n\n\nfunction PrettyFormErrorInstance(selector, opts) {\n  var options = _optionsConfig(opts);\n\n  function _removeOldErrors ( element ) {\n    if ( element ) {\n      var oldErrors = element.querySelectorAll( \".\" + options.classError );\n      [].forEach.call( oldErrors, ( error ) => {\n        error.remove();\n      });\n    }\n  }\n\n  function _createErrorElement( elemToAppend, textError ) {\n    var div = document.createElement('div');\n    div.classList.add(options.classError);\n    div.textContent = textError;\n    elemToAppend.insertAdjacentElement(options.positionMethod , div);\n  }\n\n  function _clickHandler( elem ) {\n    var invalids = elem.querySelectorAll(':invalid');\n    elem.querySelector('button').onclick = function () {\n      // Deleting old errors\n      if (document.querySelector(\".\" + options.classError)) {\n          _removeOldErrors( elem );\n        }\n      [].forEach.call(invalids, function (invalid) {\n        _createErrorElement(\n          invalid,\n          invalid.validationMessage\n        );\n      });\n    }\n  };\n\n  if (typeof jQuery === 'undefined') {\n    var elem = document.querySelectorAll(selector);\n    [].forEach.call(elem, function (element) {\n      _clickHandler(element);\n    });\n  } else {\n    $.each($(selector), function (index, item) {\n      _clickHandler(item);\n    })\n  }\n}\n\nfunction prettyFormError(elem, options) {\n  return new PrettyFormErrorInstance(elem, options);\n}\n\nif (typeof jQuery !== 'undefined') {\n  $.fn.prettyFormError = function (options) {\n    var pluginName = 'prettyFormError';\n    var dataKey = 'plugin_' + pluginName;\n    return this.each(function () {\n      if (!$.data(this, dataKey)) {\n        $.data(this, dataKey, prettyFormError(this, options));\n      }\n    });\n  }\n}\n"],"file":"prettyFormError.min.js"}