{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module.prettyFormError.js","src/utils/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","PrettyFormError","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_clickHandlerNodeList","elements","options","_onClickHandler","element","button","querySelector","callToAction","addEventListener","event","preventDefault","invalids","querySelectorAll","valids","fadeOutError","fadeOut","document","classError","_utils","utils","_removeOldErrors","observer","_fadeOutErrorConfig","config","attributes","childList","characterData","observe","setTimeout","disconnect","_createErrorElement","elementError","positionMethod","_clearValidInputs","focusErrorOnClick","focus","multiCheckbox","enabled","selector","checkboxes","forEach","input","_changeHandler","init","isHTMLElement","Element","NodeList","HTMLCollection","tempElem","_convertToArray","_setOpts","_valuePositonChecker","userValue","arguments","undefined","notFound","indexOf","toLowerCase","console","warn","tempFadeOpt","fadeOutOpts","tempMulti","cssSelector","oldErrors","error","remove","invalid","createElement","textContent","validationMessage","classList","add","insertAdjacentElement","valid","value","MutationObserver","mutations","mutation","addedNodes","checkedCount","removeAttribute","_i","setAttribute"],"mappings":"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","file":"module.prettyFormError.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// \n/* global IprettyError */\n\nimport { utils } from './utils';\n\n/** Global factory for PrettyFormError\n *  using vanilla JS\n * @returns {Function} init(element, options)\n */\n\nfunction PrettyFormError() {\n    /**\n   * Applies click handler for collection\n   * @param {*} elements Array of HTMLElements\n   * @param {*} options User options or defaults\n   * @return {void}\n   */\n  function _clickHandlerNodeList( elements, options ) {\n    for ( let i = 0; i < elements.length; i++ ) {\n      _onClickHandler( elements[ i ], options );\n    }\n  }\n\n  /**\n   * Append click event for element within the form\n   * @param {HTMLElement} element form element to apply\n   * @param {*} options User options or defaults\n   * @return {void}\n   */\n  function _onClickHandler( element, options ) {\n    const button = element.querySelector( `${options.callToAction}` );\n\n    if ( button ) {\n      button.addEventListener( 'click', ( event ) => {\n        event.preventDefault();\n        const invalids = element.querySelectorAll( ':invalid' );\n        const valids = element.querySelectorAll( ':valid' );\n\n        // removing old errors\n        if ( !options.fadeOutError.fadeOut && document.querySelector( `.${options.classError}` )) {\n          utils._removeOldErrors( element,  options.classError );\n        }\n        // fading old errors\n        if ( options.fadeOutError.fadeOut ) {\n          let observer = utils._fadeOutErrorConfig();\n          const config = { attributes: true, childList: true, characterData: true };\n          observer.observe( element, config );\n\n          setTimeout(() => {\n            utils._removeOldErrors( element,  options.classError );\n          }, 6200 );\n\n          // clearing observer\n          if ( invalids.length === 0 && valids.length > 0 ) {\n            observer.disconnect();\n            observer = null;\n          }\n        }\n\n        // adding new errors\n        if ( invalids.length > 0 ) {\n          utils._createErrorElement(\n            invalids,\n            options.elementError,\n            options.classError,\n            options.positionMethod\n          );\n        }\n\n        // clearing valid inputs\n        if ( invalids.length === 0 && valids.length > 0 ) {\n          utils._clearValidInputs( valids );\n        }\n\n        // focusing on first errrored input\n        if ( invalids.length > 0 && options.focusErrorOnClick ) {\n          invalids[ 0 ].focus();\n        }\n\n        // multiCheckbox configuration\n        if ( options.multiCheckbox.enabled ) {\n          const selector = options.multiCheckbox.selector;\n          const checkboxes = document.querySelectorAll( selector );\n\n          [].forEach.call( checkboxes, input => {\n            input.addEventListener( 'change', () => {\n              utils._changeHandler( checkboxes, selector );\n            });\n          });\n        }\n      });\n    }\n  }\n\n  return {\n    init: (\n      element,\n      options\n ) => {\n      const isHTMLElement = element instanceof Element ||\n        element instanceof NodeList ||\n        element instanceof HTMLCollection;\n      let tempElem;\n\n      // seting default element for empty case\n      isHTMLElement ?\n        tempElem = utils._convertToArray( element ) :\n        tempElem = document.querySelectorAll( 'form' );\n\n      // seting user props or default\n      // and adding click handler\n      _clickHandlerNodeList( tempElem, utils._setOpts( options ));\n    }\n  };\n}\n\n// if ( typeof jQuery !== 'undefined' ) {\n//   var dataKey = 'plugin_' + 'prettyFormError';\n// \t$.fn.prettyFormError = function( options ) {\n//     return this.each( function() {\n//       if ( !$.data( this, dataKey )) {\n//         $.data( this, dataKey, new Plugin( this, options ));\n//       }\n//     });\n//   };\n// }\n\nif ( typeof module !== 'undefined' ) module.exports = PrettyFormError;\n","// \n/* global IprettyError */\n\n/**\n * Assignement a default value and checking valid one for positionMethod prop\n * @param {string} [userValue='afterend'] user value\n * @returns {string} value for positionMethod prop\n */\nconst _valuePositonChecker = ( userValue = 'afterend' ) => {\n  const notFound = [ 'beforebegin', 'afterend' ].indexOf( userValue.toLowerCase()) === -1;\n  if ( notFound ) {\n    console.warn( 'positionMethod prop value should be \"beforebegin\" or \"afterend\", a default \"afterend\" value has been assigned' );\n  }\n  return notFound ?\n    'afterend' :\n    userValue.toLowerCase();\n};\n\nexport const utils = {\n  /** Setting defualt properties values if user\n   *  doesn't specify them\n   * @param {IprettyError} options Object implementing IprettyError\n   * @returns {void}\n    */\n  _setOpts: ( options = {}) => {\n    const tempFadeOpt = {fadeOut: false, fadeOutOpts: ''};\n    const tempMulti = {enabled: false, selector: '.multiCheckbox'};\n    const callToAction = options.callToAction || 'button';\n    const elementError = options.elementError || 'div';\n    const classError = options.classError || 'prettyFormError';\n    const positionMethod = _valuePositonChecker( options.positionMethod );\n    const focusErrorOnClick = options.focusErrorOnClick || true;\n    const fadeOutError = options.fadeOutError || tempFadeOpt;\n    const multiCheckbox = options.multiCheckbox || tempMulti;\n\n    return {\n      callToAction,\n      elementError,\n      classError,\n      positionMethod,\n      focusErrorOnClick,\n      fadeOutError,\n      multiCheckbox\n    };\n  },\n\n  /** Converts actual element into array\n   * @param {HTMLElement} element Element/s selected by user\n   * @returns {Array<HTMLElement>} Elements into an array\n   */\n  _convertToArray: ( element ) => {\n    return ( element instanceof Element ) ?\n      [element] :\n      element;\n  },\n\n  /** Romoves old errors displayed in screen\n   * @param {EventTarget} element Current form that is validated\n   * @param {string} cssSelector css class name to serach and delete\n   * @return {void}\n   */\n  _removeOldErrors: ( element, cssSelector ) => {\n    if ( element ) {\n      const oldErrors = element.querySelectorAll( `.${cssSelector}` );\n      [].forEach.call( oldErrors, ( error ) => {\n        error.remove();\n      });\n    }\n  },\n\n  /**\n   * Creates HTML to hold the error for all invalid inputs\n   * @param {NodeList<HTMLElement>} invalids Invalid inputs for actual submited form\n   * @param {string} element User or default element defined for error\n   * @param {string} classError User or default css class for error\n   * @param {string} positionMethod User or default css class for error\n   * @return {void}\n   */\n  _createErrorElement: (\n    invalids,\n    element,\n    classError,\n    positionMethod\n  ) => {\n    [].forEach.call( invalids, ( invalid ) => {\n      const tempElem = document.createElement( element );\n      tempElem.textContent = invalid.validationMessage;\n      tempElem.classList.add( `${classError}` );\n      invalid.insertAdjacentElement( positionMethod, tempElem );\n    });\n  },\n\n  /**\n   * Set inputs values as empty string for those that are valid\n   * @param {NodeList<HTMLElement>} valids Valids inputs when form is submitted\n   * @return {void}\n   */\n  _clearValidInputs: ( valids ) => {\n    [].forEach.call( valids, ( valid ) => {\n      valid.value = '';\n    });\n  },\n\n  /**\n   * Adds CSS class with animation so error can fadeout\n   * @returns {MutationObserver} mutation observer constructor\n   */\n  _fadeOutErrorConfig: () => {\n    return new MutationObserver( mutations => {\n      mutations.forEach( mutation => {\n        if ( mutation.addedNodes.length > 0 ) {\n          ( mutation.addedNodes[ 0 ] ).classList.add( 'prettyFormError-fade' );\n        }\n      });\n    });\n  },\n\n  /**\n   * setup for multi checkboxes that needs validation\n   * @param {string} checkboxes NodeList to iterate through\n   * @param {string} cssSelector common css selector for all checkboxes\n   * @returns {void}\n   */\n  _changeHandler: ( checkboxes, cssSelector ) => {\n    const checkedCount = document.querySelectorAll( `${cssSelector}:checked` ).length;\n\n    if ( checkedCount > 0 ) {\n      for ( let i = 0; i < checkboxes.length; i++ ) {\n        checkboxes[ i ].removeAttribute( 'required' );\n      }\n    } else {\n      for ( let i = 0; i < checkboxes.length; i++ ) {\n        checkboxes[ i ].setAttribute( 'required', 'required' );\n      }\n    }\n  }\n};\n"]}