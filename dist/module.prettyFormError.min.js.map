{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module.prettyFormError.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","PrettyFormError","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_valuePositonChecker","userValue","arguments","undefined","notFound","indexOf","toLowerCase","console","warn","_setOpts","options","tempFadeOpt","fadeOut","fadeOutOpts","tempMulti","enabled","selector","callToAction","elementError","classError","positionMethod","focusErrorOnClick","fadeOutError","multiCheckbox","_convertToArray","element","Element","_removeOldErrors","cssSelector","oldErrors","querySelectorAll","forEach","error","remove","_createErrorElement","invalids","invalid","tempElem","document","createElement","textContent","validationMessage","classList","add","insertAdjacentElement","_clickHandlerNodeList","elements","_onClickHandler","_clearValidInputs","valids","valid","value","_fadeOutErrorConfig","MutationObserver","mutations","mutation","addedNodes","_changeHandler","checkboxes","checkedCount","removeAttribute","_i","setAttribute","button","querySelector","addEventListener","event","preventDefault","observer","config","attributes","childList","characterData","observe","setTimeout","disconnect","focus","input","init","isHTMLElement","NodeList","HTMLCollection"],"mappings":"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","file":"module.prettyFormError.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// \n/* global IprettyError */\n\n/** Global factory for PrettyFormError\n *  using vanilla JS\n * @returns {Function} init(element, options)\n */\n\nfunction PrettyFormError() {\n  /**\n   * Assignement a default value and checking valid one for positionMethod prop\n   * @param {string} [userValue='afterend'] user value\n   * @returns {string} value for positionMethod prop\n   */\n  function _valuePositonChecker( userValue  = 'afterend' ) {\n    const notFound = [ 'beforebegin', 'afterend' ].indexOf( userValue.toLowerCase()) === -1;\n\n    if ( notFound ) {\n      console.warn( 'positionMethod prop value should be \"beforebegin\" or \"afterend\", a default \"afterend\" value has been assigned' );\n    }\n    return notFound ?\n      'afterend' :\n      userValue.toLowerCase();\n  }\n\n  /** Setting defualt properties values if user\n   *  doesn't specify them\n   * @param {IprettyError} options Object implementing IprettyError\n   * @returns {void}\n   */\n  function _setOpts( options ) {\n    const tempFadeOpt = {fadeOut: false, fadeOutOpts: ''};\n    const tempMulti = {enabled: false, selector: '.multiCheckbox'};\n    const callToAction = options.callToAction || 'button';\n    const elementError = options.elementError || 'div';\n    const classError = options.classError || 'prettyFormError';\n    const positionMethod = _valuePositonChecker( options.positionMethod );\n    const focusErrorOnClick = options.focusErrorOnClick || true;\n    const fadeOutError = options.fadeOutError || tempFadeOpt;\n    const multiCheckbox = options.multiCheckbox || tempMulti;\n\n    return {\n      callToAction,\n      elementError,\n      classError,\n      positionMethod,\n      focusErrorOnClick,\n      fadeOutError,\n      multiCheckbox\n    };\n  }\n\n  /** Converts actual element into array\n   * @param {HTMLElement} element Element/s selected by user\n   * @returns {Array<HTMLElement>} Elements into an array\n   */\n  function _convertToArray( element ) {\n    return ( element instanceof Element ) ?\n      [element] :\n      element;\n  }\n\n\n  /** Romoves old errors displayed in screen\n   * @param {EventTarget} element Current form that is validated\n   * @param {string} cssSelector css class name to serach and delete\n   * @return {void}\n   */\n  function _removeOldErrors( element, cssSelector ) {\n    if ( element ) {\n      const oldErrors = element.querySelectorAll( `.${cssSelector}` );\n      [].forEach.call( oldErrors, ( error ) => {\n        error.remove();\n      });\n    }\n  }\n\n  /**\n   * Creates HTML to hold the error for all invalid inputs\n   * @param {NodeList<HTMLElement>} invalids Invalid inputs for actual submited form\n   * @param {string} element User or default element defined for error\n   * @param {string} classError User or default css class for error\n   * @param {string} positionMethod User or default css class for error\n   * @return {void}\n   */\n  function _createErrorElement(\n    invalids,\n    element,\n    classError,\n    positionMethod\n  ) {\n    [].forEach.call( invalids, ( invalid ) => {\n      const tempElem = document.createElement( element );\n      tempElem.textContent = invalid.validationMessage;\n      tempElem.classList.add( `${classError}` );\n      invalid.insertAdjacentElement( positionMethod, tempElem );\n    });\n  }\n\n  /**\n   * Applies click handler for collection\n   * @param {*} elements Array of HTMLElements\n   * @param {*} options User options or defaults\n   * @return {void}\n   */\n  function _clickHandlerNodeList( elements, options ) {\n    for ( let i = 0; i < elements.length; i++ ) {\n      _onClickHandler( elements[ i ], options );\n    }\n  }\n\n  /**\n   * Set inputs values as empty string for those that are valid\n   * @param {NodeList<HTMLElement>} valids Valids inputs when form is submitted\n   * @return {void}\n   */\n  function _clearValidInputs( valids ) {\n    [].forEach.call( valids, ( valid ) => {\n      valid.value = '';\n    });\n  }\n\n  /**\n   * Adds CSS class with animation so error can fadeout\n   * @returns {MutationObserver} mutation observer constructor\n   */\n  function _fadeOutErrorConfig() {\n    return new MutationObserver( mutations => {\n      mutations.forEach( mutation => {\n        if ( mutation.addedNodes.length > 0 ) {\n          ( mutation.addedNodes[ 0 ] ).classList.add( 'prettyFormError-fade' );\n        }\n      });\n    });\n  }\n\n  /**\n   * setup for multi checkboxes that needs validation\n   * @param {string} cssSelector common css selector for all checkboxes\n   * @returns {void}\n   */\n  function _changeHandler( checkboxes, cssSelector ) {\n    const checkedCount = document.querySelectorAll( `${cssSelector}:checked` ).length;\n\n    if ( checkedCount > 0 ) {\n      for ( let i = 0; i < checkboxes.length; i++ ) {\n        checkboxes[ i ].removeAttribute( 'required' );\n      }\n    } else {\n      for ( let i = 0; i < checkboxes.length; i++ ) {\n        checkboxes[ i ].setAttribute( 'required', 'required' );\n      }\n    }\n  }\n\n  /**\n   * Append click event for element within the form\n   * @param {HTMLElement} element form element to apply\n   * @param {*} options User options or defaults\n   * @return {void}\n   */\n  function _onClickHandler( element, options ) {\n    const button = element.querySelector( `${options.callToAction}` );\n\n    if ( button ) {\n      button.addEventListener( 'click', ( event ) => {\n        event.preventDefault();\n        const invalids = element.querySelectorAll( ':invalid' );\n        const valids = element.querySelectorAll( ':valid' );\n\n        // removing old errors\n        if ( !options.fadeOutError.fadeOut && document.querySelector( `.${options.classError}` )) {\n          _removeOldErrors( element,  options.classError );\n        }\n        // fading old errors\n        if ( options.fadeOutError.fadeOut ) {\n          let observer = _fadeOutErrorConfig();\n          const config = { attributes: true, childList: true, characterData: true };\n          observer.observe( element, config );\n\n          setTimeout(() => {\n            _removeOldErrors( element,  options.classError );\n          }, 6200 );\n\n          // clearing observer\n          if ( invalids.length === 0 && valids.length > 0 ) {\n            observer.disconnect();\n            observer = null;\n          }\n        }\n\n        // adding new errors\n        if ( invalids.length > 0 ) {\n          _createErrorElement(\n            invalids,\n            options.elementError,\n            options.classError,\n            options.positionMethod\n          );\n        }\n\n        // clearing valid inputs\n        if ( invalids.length === 0 && valids.length > 0 ) {\n          _clearValidInputs( valids );\n        }\n\n        // focusing on first errrored input\n        if ( invalids.length > 0 && options.focusErrorOnClick ) {\n          invalids[ 0 ].focus();\n        }\n\n        // multiCheckbox configuration\n        if ( options.multiCheckbox.enabled ) {\n          const selector = options.multiCheckbox.selector;\n          const checkboxes = document.querySelectorAll( selector );\n\n          [].forEach.call( checkboxes, input => {\n            input.addEventListener( 'change', () => {\n              _changeHandler( checkboxes, selector );\n            });\n          });\n        }\n      });\n    }\n  }\n\n  return {\n    init: (\n      element,\n      options = {}\n ) => {\n      const isHTMLElement = element instanceof Element ||\n        element instanceof NodeList ||\n        element instanceof HTMLCollection;\n      let tempElem;\n\n      // seting default element for empty case\n      isHTMLElement ?\n        tempElem = _convertToArray( element ) :\n        tempElem = document.querySelectorAll( 'form' );\n\n      // seting user props or default\n      // and adding click handler\n      _clickHandlerNodeList( tempElem, _setOpts( options ));\n    }\n  };\n}\n\nmodule.exports = PrettyFormError;\n"]}