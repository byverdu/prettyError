{"version":3,"sources":["prettyError.min.js"],"names":["$","window","document","undefined","createErrorsForInvalid","invalid","options","each","index","value","errors","elementError","addClass","classError","text","validationMessage","positionMethod","pluginName","dataKey","Plugin","element","this","multiCheckbox","enabled","selector","callToAction","focusErrorOnClick","fadeOutError","fadeOut","init","prototype","handleErrorsInOpts","extend","multiCheckboxConfig","handleClickCallToAction","allCheckboxes","change","is","removeAttr","attr","opts","console","warn","btn","find","on","event","preventDefault","remove","not","length","focus","fadeOutOpts","fn","data","jQuery"],"mappings":"CAEG,SAAUA,EAAGC,EAAQC,EAAUC,GAKhC,QAASC,GAAuBC,EAASC,GACvC,MAAON,GAAEO,KAAMF,EAAS,SAAUG,EAAOC,GACvC,GAAIC,GAASV,EAAE,IAAMM,EAAQK,aAAe,KACzCC,SAAUN,EAAQO,YAClBC,KAAML,EAAMM,kBAEff,GAAGS,GAAQH,EAAQU,gBAAiBN,KAVxC,GAAIO,GAAa,cACbC,EAAU,UAAYD,EActBE,EAAS,SAAUC,EAASd,GAC9Be,KAAKD,QAAUpB,EAAEoB,GACjBC,KAAKf,SACHgB,eACEC,SAAS,EACTC,SAAU,kBAEZX,WAAY,cACZG,eAAgB,QAChBL,aAAc,MACdc,aAAc,SACdC,mBAAmB,EACnBC,cAAeC,SAAS,IAG1BP,KAAKQ,KAAMvB,GAGba,GAAOW,WACLD,KAAM,SAAUvB,GAEVA,IAAYH,IACdG,EAAUe,KAAKU,mBAAmBzB,IAGpCN,EAAEgC,OAAQX,KAAKf,QAASA,GAGpBe,KAAKf,QAAQgB,cAAcC,SAC7BF,KAAKY,oBAAoBZ,KAAKf,SAGhCe,KAAKa,wBAAyBb,KAAKD,QAASC,KAAKf,UAKnD2B,oBAAqB,SAAS3B,GAC5B,GAAI6B,GAAgBnC,EAAGM,EAAQgB,cAAcE,SAC7CW,GACGC,OAAO,WACFD,EAAcE,GAAG,YACnBF,EAAcG,WAAW,YAEzBH,EAAcI,KAAK,WAAY,eAMvCR,mBAAoB,SAASzB,GAC3B,GAAIU,IACFwB,KAAMlC,EAAQU,eACdF,KAAM,uGAGJY,GACFc,KAAMlC,EAAQoB,kBACdZ,KAAM,mDAkBR,OAd4B,UAAxBE,EAAewB,MACS,WAAxBxB,EAAewB,MACfxB,EAAewB,OAASrC,IAE1BsC,QAAQC,KAAK1B,EAAeF,MAC5BE,EAAewB,KAAO,SAIe,iBAA3Bd,GAAkBc,OAC5BC,QAAQC,KAAKhB,EAAkBZ,MAC/BY,EAAkBc,MAAO,GAGpBlC,GAIT4B,wBAAyB,SAAUd,EAASd,GAC1C,GAAIqC,GAAMvB,EAAQwB,KAAMtC,EAAQmB,aAEhCkB,GAAIE,GAAI,QAAS,SAAUC,GACzBA,EAAMC,iBAEN/C,EAAG,IAAMM,EAAQO,YAAamC,QAI9B,IAAI3C,GAAUe,EAAQwB,KAAM,YAAaK,IAAK,WAG9C7C,GAAwBC,EAASC,GAG5BA,EAAQoB,mBAAqBrB,EAAQ6C,OAAS,GACjD7C,EAAQ,GAAG8C,QAIR7C,EAAQqB,aAAaC,SACxB5B,EAAG,IAAMM,EAAQO,YACde,QAAStB,EAAQqB,aAAayB,iBAMzCpD,EAAEqD,GAAIpC,GAAe,SAAUX,GAC7B,MAAOe,MAAKd,KAAM,WACVP,EAAEsD,KAAMjC,KAAMH,IAClBlB,EAAEsD,KAAMjC,KAAMH,EAAS,GAAIC,GAAQE,KAAMf,QAI9CiD,OAAQtD,OAAQC","file":"prettyError.min.js","sourcesContent":["// prettyError jQuery plugin\n\n;( function( $, window, document, undefined ) { // eslint-disable-line\n  var pluginName = 'prettyError';\n  var dataKey = 'plugin_' + pluginName;\n\n  // utils\n  function createErrorsForInvalid(invalid, options) {\n    return $.each( invalid, function( index, value ) {\n      var errors = $('<' + options.elementError + '>')\n        .addClass( options.classError )\n        .text( value.validationMessage );\n      // position for error message -> before or after\n      $( value )[options.positionMethod]( errors );\n    });\n  }\n\n  // Plugin constructor\n  var Plugin = function( element, options ) {\n    this.element = $(element);\n    this.options = {\n      multiCheckbox: {\n        enabled: false,\n        selector: '.multiCheckbox'\n      },\n      classError: 'prettyError',\n      positionMethod: 'after',\n      elementError: 'div',\n      callToAction: 'button',\n      focusErrorOnClick: true,\n      fadeOutError: {fadeOut: false}\n    };\n\n    this.init( options );\n  };\n\n  Plugin.prototype = {\n    init: function( options ) {\n      // handleling errors\n      if (options !== undefined) {\n        options = this.handleErrorsInOpts(options);\n      }\n\n      $.extend( this.options, options );\n\n      // multiCheckbox configuration\n      if (this.options.multiCheckbox.enabled) {\n        this.multiCheckboxConfig(this.options);\n      }\n\n      this.handleClickCallToAction( this.element, this.options );\n    },\n\n    // workaround to validate the multiple\n    // checkboxes that at least one value is required\n    multiCheckboxConfig: function(options) {\n      var allCheckboxes = $( options.multiCheckbox.selector );\n      allCheckboxes\n        .change(function() {\n          if (allCheckboxes.is(':checked')) {\n            allCheckboxes.removeAttr('required');\n          } else {\n            allCheckboxes.attr('required', 'required');\n          }\n        });\n    },\n\n    // user options checker to avoid breaking the plugin initialization\n    handleErrorsInOpts: function(options) {\n      var positionMethod = {\n        opts: options.positionMethod,\n        text: 'positionMethod prop values should be \"after\" or \"before\", a default \"after\" value has been assigned'\n      };\n\n      var focusErrorOnClick = {\n        opts: options.focusErrorOnClick,\n        text: 'focusErrorOnClick prop value should be a Boolean'\n      };\n\n      // options.positionMethod\n      if (positionMethod.opts !== 'after' &&\n          positionMethod.opts !== 'before' &&\n          positionMethod.opts !== undefined\n        ) {\n        console.warn(positionMethod.text);\n        positionMethod.opts = 'after';\n      }\n\n      // options.focusErrorOnClick\n      if ( typeof focusErrorOnClick.opts !== 'boolean') {\n        console.warn(focusErrorOnClick.text);\n        focusErrorOnClick.opts = true;\n      }\n\n      return options;\n    },\n\n    // button click handler\n    handleClickCallToAction: function( element, options ) {\n      var btn = element.find( options.callToAction );\n\n      btn.on( 'click', function( event ) {\n        event.preventDefault();\n        // removing the old errors\n        $( '.' + options.classError ).remove();\n\n        // targeting all invalid errors,\n        // fieldset elements also receive the validity pseudo-selector\n        var invalid = element.find( ':invalid' ).not( 'fieldset' );\n\n        // Adding errors to :invalid elements\n        createErrorsForInvalid( invalid, options );\n\n        // focus the first element with error\n        if ( options.focusErrorOnClick && invalid.length > 1 ) {\n          invalid[0].focus();\n        }\n\n        // fadeOut de errors\n        if ( options.fadeOutError.fadeOut ) {\n          $( '.' + options.classError )\n            .fadeOut( options.fadeOutError.fadeOutOpts );\n        }\n      });\n    }\n  };\n\n  $.fn[ pluginName ] = function( options ) {\n    return this.each( function() {\n      if ( !$.data( this, dataKey ) ) {\n        $.data( this, dataKey, new Plugin( this, options ) );\n      }\n    });\n  };\n}( jQuery, window, document ));\n"]}